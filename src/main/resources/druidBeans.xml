<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4j2Filter">
        <!--所有DataSource相关的日志-->
        <!--<property name="dataSourceLogEnabled" value="true"/>-->
        <!--所有连接相关的日志-->
        <!--<property name="connectionLogEnabled" value="true"/>-->
        <!--所有连接上发生异常的日志-->
        <!--<property name="connectionLogErrorEnabled" value="true"/>-->
        <!--所有Statement相关的日志-->
        <!--<property name="statementLogEnabled" value="true"/>-->
        <!--所有Statement发生异常的日志-->
        <!--<property name="statementLogErrorEnabled" value="true"/>-->
        <!--所有resultSet的日志-->
        <!--<property name="resultSetLogEnabled" value="true"/>-->
        <!--resultSet发生异常的日志-->
        <!--<property name="resultSetLogErrorEnabled" value="true"/>-->
        <!--数据库连接之前的日志-->
        <!--<property name="connectionConnectBeforeLogEnabled" value="true"/>-->
        <!--数据库连接后的日志-->
        <!--<property name="connectionConnectAfterLogEnabled" value="true"/>-->
        <!--提交之后的额日志-->
        <!--<property name="connectionCommitAfterLogEnabled" value="true"/>-->
        <!--连接回滚之后的日志-->
        <!--<property name="connectionRollbackAfterLogEnabled" value="true"/>-->
        <!--连接关闭之后的日志-->
        <!--<property name="connectionCloseAfterLogEnabled" value="true"/>-->
        <!--Statement创建之后的日志-->
        <!--<property name="statementCreateAfterLogEnabled" value="true"/>-->
        <!--StatementPrepared创建之后的日志-->
        <!--<property name="statementPrepareAfterLogEnabled" value="true"/>-->
        <!--StatementPrepare调用之后的日志-->
        <!--<property name="statementPrepareCallAfterLogEnabled" value="true"/>-->
        <!--StatementPrepare执行之后的日志-->
        <!--<property name="statementExecuteAfterLogEnabled" value="true"/>-->
        <!--Statement执行查询之后的日志-->
        <!--<property name="statementExecuteQueryAfterLogEnabled" value="true"/>-->
        <!--Statement执行更新之后的日志-->
        <!--<property name="statementExecuteUpdateAfterLogEnabled" value="true"/>-->
        <!--Statement执行批量之后的日志-->
        <!--<property name="statementExecuteBatchAfterLogEnabled" value="true"/>-->
        <!--Statement执行关闭之后的日志-->
        <!--<property name="statementCloseAfterLogEnabled" value="true"/>-->
        <!--参数日志-->
        <!--<property name="statementParameterSetLogEnabled" value="true"/>-->
        <!--result相关的日志-->
        <!--<property name="resultSetNextAfterLogEnabled" value="true"/>-->
        <!--<property name="resultSetOpenAfterLogEnabled" value="true"/>-->
        <!--<property name="resultSetCloseAfterLogEnabled" value="true"/>-->
    </bean>

    <!--定制化wallFilter，一个防止sql注入的过滤器-->
    <bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
        <property name="dbType" value="mysql"/>
    </bean>

    <!--name属性，配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。如果没有配置，将会生成一个名字，格式是："DataSource-" + System
    .identityHashCode(this). 另外配置此属性至少在1.0.5版本中是不起作用的，强行设置name会出错-->
    <bean id="dataSource" name="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init"
          destroy-method="close">
        <property name="url" value="${spring.datasource.druid.url}"/>
        <property name="username" value="${spring.datasource.druid.username}"/>
        <property name="password" value="${spring.datasource.druid.password}"/>

        <!--最大连接池数量-->
        <property name="maxActive" value="20"/>
        <!--初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时-->
        <property name="initialSize" value="1"/>
        <!--获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。-->
        <property name="maxWait" value="60000"/>
        <!--最小连接池数量-->
        <property name="minIdle" value="1"/>
        <!--连接池中的minIdle数量以内的连接，空闲时间超过minEvictableIdleTimeMillis，则会执行keepAlive操作。-->
        <property name="keepAlive" value="false"/>

        <!--filters和proxyFilters是组合关系，如果单独写别名在filters里，会按照druid的默认的配置进行过滤
       如果在这里用默认的log4j2会输出很多信息，不专业，所有用proxyFilters配置log4j2，定制化日志输出-->
        <property name="filters" value="config"/>
        <!--配置数据库密码加密，在命令行中执行 java -cp druid-1.0.16.jar com.alibaba.druid.filter.config.ConfigTools you_password
        生成私钥和公钥-->
        <property name="connectionProperties"
                  value="config.decrypt=true;config.decrypt.key=${spring.datasource.druid.publicKey}"/>
        <!--类型是List<com.alibaba.druid.filter.Filter>，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系-->
        <property name="proxyFilters">
            <list>
                <ref bean="log-filter"/>
                <ref bean="wall-filter"/>
            </list>
        </property>

        <!--有两个含义：
1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明-->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!--连接保持空闲而不被驱逐的最小时间-->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <!--用来检测连接是否有效的sql，要求是一个查询语句，常用select
       'x'。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用。-->
        <property name="validationQuery" value="true"/>
        <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis
        ，执行validationQuery检测连接是否有效-->
        <property name="testWhileIdle" value="true"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。-->
        <property name="testOnBorrow" value="false"/>
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能-->
        <property name="testOnReturn" value="false"/>

        <!--单位：秒，检测连接是否有效的超时时间。底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法-->
        <!--<property name="validationQueryTimeout" value="10"/>-->

        <!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。-->
        <property name="poolPreparedStatements" value="false"/>
        <!--要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache
        占用内存过多的问题，可以把这个数值配置大一些，比如说100-->
        <property name="maxOpenPreparedStatements" value="0"/>

        <property name="asyncInit" value="true"/>


        <!--当程序存在缺陷时，申请的连接忘记关闭，这时候，就存在连接泄漏了。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接-->
        <property name="removeAbandoned" value="true"/>
        <property name="removeAbandonedTimeout" value="1800"/>
        <property name="logAbandoned" value="true"/>
    </bean>

    <!--druid stat拦截监控，有三种配置方式，接口类型、方法名正则、BeanId。这里采用方法名正则表达式的方式 start-->
    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.example.demo.service.*</value>
                <value>com.example.demo.dao.*</value>
            </list>
        </property>
    </bean>
    <aop:config>
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut"/>
    </aop:config>
    <!--druid stat拦截监控 end-->
</beans>